package com.helpinghandslocation.helpinghandslocation.controllers;

import com.helpinghandslocation.helpinghandslocation.dto.request.LoginRequestDTO;
import com.helpinghandslocation.helpinghandslocation.dto.response.TokenResponseDTO;
import com.helpinghandslocation.helpinghandslocation.utils.JwtTokenUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@CrossOrigin
@RestController
@RequestMapping("/login")
public class BasicAuthController {

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @Autowired
    private AuthenticationManager authenticationManager;

    @PostMapping
    public ResponseEntity<TokenResponseDTO> login(@RequestBody LoginRequestDTO login) {
        try {
            // Autenticar usuario
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(login.getUsername(), login.getPassword())
            );

            // Si llega aquí, el usuario está autenticado correctamente, generamos el token
            String token = jwtTokenUtil.generateToken(authentication.getName());

            // Devolvemos el token JWT en un TokenResponseDTO
            return ResponseEntity.ok(TokenResponseDTO.builder().token(token).build());
        } catch (BadCredentialsException e) {
            return ResponseEntity.status(401).body(TokenResponseDTO.builder().token("Credenciales incorrectas").build());
        } catch (Exception e) {
            return ResponseEntity.status(500).body(TokenResponseDTO.builder().token("Error interno del servidor").build());
        }
    }
}
